
#######################################################################
# This file takes care of configuring Nii to build with the settings
# given in CMake. It creates the necessary config.h file and will 
# also prepare package files for pkg-config and CMake.
#######################################################################

message(STATUS "正在执行ConfigureBuild.cmake脚本")

set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DDEBUG")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG")

if (NII_BUILD_PLATFORM_IPHONE)
    set(NII_SET_BUILD_PLATFORM_IPHONE 1)
    set(NII_STATIC TRUE)
    set(NII_STATIC_LIB TRUE)
    set(NII_CONFIG_ENABLE_PVRTC TRUE)
endif()

# 我们是否编译静态库?
if (NII_STATIC)
    set(NII_LIB_TYPE STATIC)
else ()
    set(NII_LIB_TYPE SHARED)
endif ()

# 配置线程选项
set(NII_THREAD_PROVIDER 0)
if (NII_CONFIG_THREADS)
	if (UNIX)
		add_definitions(-pthread)
	endif ()

	if (NII_CONFIG_THREAD_PROVIDER STREQUAL "boost")
		set(NII_THREAD_PROVIDER 1)
		include_directories(${Boost_INCLUDE_DIRS})
		# On MSVC Boost usually tries to autolink boost libraries. However since
		# this behaviour is not available on all compilers, we need to find the libraries
		# ourselves, anyway. Disable auto-linking to avoid mess-ups.
		add_definitions(-DBOOST_ALL_NO_LIB)
        if (MINGW AND Boost_USE_STATIC_LIBS)
            # mingw needs this to link against static thread libraries
            add_definitions(-DBOOST_THREAD_USE_LIB)
        endif ()        
		set(NII_THREAD_LIBRARIES ${Boost_LIBRARIES})
	endif ()

	if (NII_CONFIG_THREAD_PROVIDER STREQUAL "poco")
		set(NII_THREAD_PROVIDER 2)
		include_directories(${POCO_INCLUDE_DIRS})
		set(NII_THREAD_LIBRARIES ${POCO_LIBRARIES})
	endif ()

	if (NII_CONFIG_THREAD_PROVIDER STREQUAL "tbb")
		set(NII_THREAD_PROVIDER 3)
		include_directories(${TBB_INCLUDE_DIRS})
		set(NII_THREAD_LIBRARIES ${TBB_LIBRARIES})
	endif ()
endif()


# 确定配置值依赖的构建选项 
set(NII_SET_DOUBLE 0)
set(NII_SET_ALLOCATOR ${NII_CONFIG_ALLOCATOR})
set(NII_SET_CONTAINERS_USE_ALLOCATOR 0)
set(NII_SET_STRING_USE_ALLOCATOR 0)
set(NII_SET_MEMTRACK_DEBUG 0)
set(NII_SET_MEMTRACK_RELEASE 0)
set(NII_SET_THREADS ${NII_CONFIG_THREADS})
set(NII_SET_THREAD_PROVIDER ${NII_THREAD_PROVIDER})
set(NII_SET_DISABLE_FREEIMAGE 0)
set(NII_SET_DISABLE_DDS 0)
set(NII_SET_DISABLE_PVRTC 0)
set(NII_SET_DISABLE_ZIP 0)
set(NII_SET_DISABLE_VIEWPORT_ORIENTATIONMODE 0)
set(NII_SET_DISABLE_GLES2_CG_SUPPORT 0)
set(NII_SET_DISABLE_GLES2_GLSL_OPTIMISER 0)
set(NII_SET_NEW_COMPILERS 0)
set(NII_STATIC_LIB 0)
set(NII_SET_USE_BOOST 0)
set(NII_SET_PROFILING 0)
if (NII_CONFIG_DOUBLE)
    set(NII_SET_DOUBLE 1)
endif()
if (NII_CONFIG_CONTAINERS_USE_CUSTOM_ALLOCATOR)
    set(NII_SET_CONTAINERS_USE_ALLOCATOR 1)
endif ()
if (NII_CONFIG_STRING_USE_CUSTOM_ALLOCATOR)
    set(NII_SET_STRING_USE_ALLOCATOR 1)
endif ()
if (NII_CONFIG_MEMTRACK_DEBUG)
    set(NII_SET_MEMTRACK_DEBUG 1)
endif()
if (NII_CONFIG_MEMTRACK_RELEASE)
    set(NII_SET_MEMTRACK_RELEASE 1)
endif()
if (NOT NII_CONFIG_ENABLE_FREEIMAGE)
    set(NII_SET_DISABLE_FREEIMAGE 1)
endif()
if (NOT NII_CONFIG_ENABLE_DDS)
    set(NII_SET_DISABLE_DDS 1)
endif()
if (NOT NII_CONFIG_ENABLE_PVRTC)
    set(NII_SET_DISABLE_PVRTC 1)
endif()
if (NOT NII_CONFIG_ENABLE_ZIP)
    set(NII_SET_DISABLE_ZIP 1)
endif()
if (NOT NII_CONFIG_ENABLE_VIEWPORT_ORIENTATIONMODE)
    set(NII_SET_DISABLE_VIEWPORT_ORIENTATIONMODE 1)
endif()
if (NOT NII_CONFIG_ENABLE_GLES2_CG_SUPPORT)
    set(NII_SET_DISABLE_GLES2_CG_SUPPORT 1)
endif()
if (NOT NII_CONFIG_ENABLE_GLES2_GLSL_OPTIMISER)
    set(NII_SET_DISABLE_GLES2_GLSL_OPTIMISER 1)
endif()
if(NII_CONFIG_NEW_COMPILERS)
    set(NII_SET_NEW_COMPILERS 1)
endif()
if (NII_STATIC)
    set(NII_STATIC_LIB 1)
endif()
if (NII_USE_BOOST)
    set(NII_SET_USE_BOOST 1)
endif()
if (NII_PROFILING)
    set(NII_SET_PROFILING 1)
endif()

if (NII_TEST_BIG_ENDIAN)
    set(NII_CONFIG_BIG_ENDIAN 1)
else ()
    set(NII_CONFIG_LITTLE_ENDIAN 1)
endif ()

if (NII_BUILD_RTSHADERSYSTEM_CORE_SHADERS)
	set(RTSHADER_SYSTEM_BUILD_CORE_SHADERS 1)
else ()
	set(RTSHADER_SYSTEM_BUILD_CORE_SHADERS 0)
endif ()

if (NII_BUILD_RTSHADERSYSTEM_EXT_SHADERS)	
	set(RTSHADER_SYSTEM_BUILD_EXT_SHADERS 1)
else ()
	set(RTSHADER_SYSTEM_BUILD_EXT_SHADERS 0)
endif ()

# 生成NiiBuildSettings.h 
configure_file(${NII_TEMPLATES_DIR}/NiiBuildSettings.h.in ${NII_INTERMEDIATE_DIR}/NiiBuildSettings.h @ONLY)
install(FILES ${NII_INTERMEDIATE_DIR}/NiiBuildSettings.h DESTINATION NIIEngine/include/NII)
message(STATUS "配置NiiBuildSettings.h")
# 创建pkg-config脚本
if (UNIX)
    set(NII_LIB_SUFFIX "")
    set(NII_PLUGIN_PREFIX "")
    set(NII_PLUGIN_EXT ".so")
    set(NII_PAGING_ADDITIONAL_PACKAGES "")
    if (NII_STATIC)
        set(NII_LIB_SUFFIX "${NII_LIB_SUFFIX}Static")
        set(NII_PLUGIN_PREFIX "lib")
        set(NII_PLUGIN_EXT ".a")
    endif ()
    if (NII_BUILD_TYPE STREQUAL "debug")
        set(NII_LIB_SUFFIX "${NII_LIB_SUFFIX}_d")
    endif ()

    set(NII_ADDITIONAL_LIBS "")
    set(NII_CFLAGS "")
    set(NII_PREFIX_PATH ${CMAKE_INSTALL_PREFIX})
    if (NII_CONFIG_THREADS GREATER 0)
        set(NII_CFLAGS "-pthread")
        set(NII_ADDITIONAL_LIBS "${NII_ADDITIONAL_LIBS} -lpthread")
    endif ()
    if (NII_STATIC)
        if (NII_CONFIG_THREADS)
            set(NII_ADDITIONAL_LIBS "${NII_ADDITIONAL_LIBS} -lboost-thread-mt")
        endif ()
        # 因为freeimage没有pkgconfig文件,所以需要手动加入库
        set(NII_ADDITIONAL_LIBS "${NII_ADDITIONAL_LIBS} -lfreeimage")
        configure_file(${NII_TEMPLATES_DIR}/NIIStatic.pc.in ${NII_INTERMEDIATE_DIR}/pkgconfig/NII.pc @ONLY)
    else ()
        configure_file(${NII_TEMPLATES_DIR}/NII.pc.in ${NII_INTERMEDIATE_DIR}/pkgconfig/NII.pc @ONLY)
    endif ()
    install(FILES ${NII_INTERMEDIATE_DIR}/pkgconfig/NII.pc DESTINATION ${NII_LIB_DIRECTORY}/pkgconfig)
    message(STATUS "安装 NII.pc")

    # 配置附加的包
    if (NII_BUILD_PLUGIN_PCZ)
        configure_file(${NII_TEMPLATES_DIR}/NII-PCZ.pc.in ${NII_INTERMEDIATE_DIR}/pkgconfig/NII-PCZ.pc @ONLY)
        install(FILES ${NII_INTERMEDIATE_DIR}/pkgconfig/NII-PCZ.pc DESTINATION ${NII_LIB_DIRECTORY}/pkgconfig)
        message(STATUS "安装 NII-PCZ.pc")
    endif ()
  
    if (NII_BUILD_COMPONENT_PAGING)
        configure_file(${NII_TEMPLATES_DIR}/NII-Paging.pc.in ${NII_INTERMEDIATE_DIR}/pkgconfig/NII-Paging.pc @ONLY)
        install(FILES ${NII_INTERMEDIATE_DIR}/pkgconfig/NII-Paging.pc DESTINATION ${NII_LIB_DIRECTORY}/pkgconfig)
        message(STATUS "安装 NII-Paging.pc")
    endif ()

    if (NII_BUILD_COMPONENT_TERRAIN)
        if (NII_BUILD_COMPONENT_PAGING)
            set(NII_PAGING_ADDITIONAL_PACKAGES ", NII-Paging = ${NII_VERSION}")
        endif ()
        configure_file(${NII_TEMPLATES_DIR}/NII-Terrain.pc.in ${NII_INTERMEDIATE_DIR}/pkgconfig/NII-Terrain.pc @ONLY)
        install(FILES ${NII_INTERMEDIATE_DIR}/pkgconfig/NII-Terrain.pc DESTINATION ${NII_LIB_DIRECTORY}/pkgconfig)
        message(STATUS "安装 NII-Terrain.pc")
    endif ()

    if (NII_BUILD_COMPONENT_RTSHADERSYSTEM)
        configure_file(${NII_TEMPLATES_DIR}/NII-RTShaderSystem.pc.in ${NII_INTERMEDIATE_DIR}/pkgconfig/NII-RTShaderSystem.pc @ONLY)
        install(FILES ${NII_INTERMEDIATE_DIR}/pkgconfig/NII-RTShaderSystem.pc DESTINATION ${NII_LIB_DIRECTORY}/pkgconfig)
        message(STATUS "安装 NII-RTShaderSystem.pc")
    endif ()

    if (NII_BUILD_COMPONENT_PROPERTY)
        configure_file(${NII_TEMPLATES_DIR}/NII-Property.pc.in ${NII_INTERMEDIATE_DIR}/pkgconfig/NII-Property.pc @ONLY)
        install(FILES ${NII_INTERMEDIATE_DIR}/pkgconfig/NII-Property.pc DESTINATION ${NII_LIB_DIRECTORY}/pkgconfig)
        message(STATUS "安装 NII-Property.pc")
    endif ()

    if (CMAKE_CXX_COMPILER MATCHES ".*clang")
        set(CMAKE_COMPILER_IS_CLANGXX 1)
    endif ()  
  
endif ()

if(NII_CONFIG_STATIC_LINK_CRT)
# 我们静态连接时减少依赖
foreach(flag_var CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
    if(${flag_var} MATCHES "/MD")
        string(REGEX REPLACE "/MD" "/MT" ${flag_var} "${${flag_var}}")
    endif(${flag_var} MATCHES "/MD")
    if(${flag_var} MATCHES "/MDd")
        string(REGEX REPLACE "/MDd" "/MTd" ${flag_var} "${${flag_var}}")
    endif(${flag_var} MATCHES "/MDd")
endforeach(flag_var)
endif(NII_CONFIG_STATIC_LINK_CRT)

### Commented because the FindNII script can currently fill this role better ###
# # Create the CMake package files
# if (WIN32)
#   set(NII_CMAKE_DIR CMake)
# elseif (UNIX)
#   set(NII_CMAKE_DIR lib/cmake)
# elseif (APPLE)
# endif ()
# configure_file(${NII_TEMPLATES_DIR}/NIIConfig.cmake.in ${NII_BINARY_DIR}/cmake/NIIConfig.cmake @ONLY)
# configure_file(${NII_TEMPLATES_DIR}/NIIConfigVersion.cmake.in ${NII_BINARY_DIR}/cmake/NIIConfigVersion.cmake @ONLY)
# install(FILES
#   ${NII_BINARY_DIR}/cmake/NIIConfig.cmake
#   ${NII_BINARY_DIR}/cmake/NIIConfigVersion.cmake
#   DESTINATION ${NII_CMAKE_DIR}
# )
# 
