/*
-----------------------------------------------------------------------------
A
     __      _   _   _   ______
    |   \   | | | | | | |  ____)                    _
    | |\ \  | | | | | | | |         ___      ___   (_)   ___
    | | \ \ | | | | | | | |____    / _ \   / ___ \  _   / _ \   ___
    | |  \ \| | | | | | |  ____)  | / \ | | |  | | | | | / \ | / _ )
    | |   \ | | | | | | | |_____  | | | | | |__| | | | | | | | | __/
    |_|    \ _| |_| |_| |_______) |_| |_|  \___| | |_| |_| |_| |___|
                                             __/ |                 
                                            \___/   
                                                
                                                
                                                                 F i l e


Copyright: NIIEngine Team Group

Home page: www.niiengine.com 

Email: niiengine@gmail.com OR niiengine@163.com

Licence: commerce(www.niiengine.com/license)(Three kinds)
------------------------------------------------------------------------------
*/

#include "NiiPreProcess.h"
#include "NiiJob.h"
#include "NiiThreadManager.h"

namespace NII
{
    //------------------------------------------------------------------------
    //------------------------------------------------------------------------
    // Job
    //------------------------------------------------------------------------
    //------------------------------------------------------------------------
    Job::Job() :
        mID(0),
        mRetryCount(0),
        mLevel(PL_Mid),
        mAlone(false),
        mAborted(false){}
    //------------------------------------------------------------------------
    Job::Job(NCount retry, RequestID id) :
        mID(id),
        mRetryCount(retry),
        mLevel(PL_Mid),
        mAlone(false),
        mAborted(false)
    {
    }
    //------------------------------------------------------------------------
    Job::~Job()
    {
    }
    //------------------------------------------------------------------------
    void Job::process()
    {
    }
    //------------------------------------------------------------------------
    void Job::pause()
    {
    }
    //------------------------------------------------------------------------
    void Job::stop()
    {
        mAborted = true;
    }
    //------------------------------------------------------------------------
    void Job::setAlone(bool s)
    {
        mAlone = s;
    }
    //------------------------------------------------------------------------
    bool Job::isAlone() const
    {
        return mAlone;
    }
    //------------------------------------------------------------------------
    void Job::setLevel(PrcLevel l)
    {
        mLevel = l;
    }
    //------------------------------------------------------------------------
    PrcLevel Job::getLevel() const
    {
        return mLevel;
    }
    //------------------------------------------------------------------------
    NIIf Job::getRelUsage() const
    {
        return 0;
    }
    //------------------------------------------------------------------------
    Nui64 Job::getAbsUsage() const
    {
        return 0;
    }
    //------------------------------------------------------------------------
    void Job::onProcess()
    {
    }
    //------------------------------------------------------------------------
    void Job::onNotify()
    {
    }
    //------------------------------------------------------------------------
    void Job::onComplete()
    {
    }
    //------------------------------------------------------------------------
    void Job::onFail()
    {
    }
    //------------------------------------------------------------------------
    void Job::onRetry()
    {
    }
    //------------------------------------------------------------------------
    bool Job::equal(const Identifier &)
    {
        return false;
    }
    //------------------------------------------------------------------------
    //------------------------------------------------------------------------
    // JobResult
    //------------------------------------------------------------------------
    //------------------------------------------------------------------------
    JobResult::JobResult(Job * src, bool complete, const String & tips) :
        mJob(src),
        mSuccess(complete),
        mMessages(tips),
        mAbort(false)
    {
    }
    //------------------------------------------------------------------------
    JobResult::~JobResult()
    {
        if(mJob)
        {
            N_delete mJob;
            mJob = 0;
        }
    }
    //------------------------------------------------------------------------
    void JobResult::abort()
    {
        mJob->stop();
        mAbort = true;
    }
    //------------------------------------------------------------------------
    void JobResult::retry(JobPrc * prc)
    {
        NCount temp = mJob->getRetryCount();
        if(temp)
        {
            mJob->setRetryCount(temp - 1);
            N_Only(Thread).add(mJob->mTypeID, mJob, prc, false);
            mRetry = true;
			mJob->onRetry();
        }
    }
    //------------------------------------------------------------------------
}