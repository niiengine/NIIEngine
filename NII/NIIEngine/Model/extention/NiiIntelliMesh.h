/*
-----------------------------------------------------------------------------
A
     __      _   _   _   ______
    |   \   | | | | | | |  ____)                    _
    | |\ \  | | | | | | | |         ___      ___   (_)   ___
    | | \ \ | | | | | | | |____    / _ \   / ___ \  _   / _ \   ___
    | |  \ \| | | | | | |  ____)  | / \ | | |  | | | | | / \ | / _ )
    | |   \ | | | | | | | |_____  | | | | | |__| | | | | | | | | __/
    |_|    \ _| |_| |_| |_______) |_| |_|  \___| | |_| |_| |_| |___|
                                             __/ |                 
                                            \___/   
                                                
                                                
                                                                 F i l e


Copyright: NIIEngine Team Group

Home page: www.niiengine.com 

Email: niiengine@gmail.com OR niiengine@163.com

Licence: commerce(www.niiengine.com/license)(Three kinds)
------------------------------------------------------------------------------
*/

#ifndef NII_INTELLI_MESH_H
#define NII_INTELLI_MESH_H

#include "NiiPreInclude.h"
#include "NiiMesh.h"

namespace NII
{
    /** 这个类是用来优化一个网格在渲染时所需要渲染的三角形数量
    @remark 
        我们知道三角形是通过法线还有当前动态光位置而被成具体的像素,然而当一个全
        局动态光是位置是不动的而且具体被照射的物体也是不动的,这时候我们知道这个
        网格中三角形所形成的像素基本处于不变状态,只要计算一次就行了,然而计算机
        不是聪明的,如果我们不手动把这些有特定条件的网格挑出来,再进行渲染前计算
        和渲染队列的整理,我们可能要花费很多性能的代价,因此这个类由此而生
    @par
        类似的实现就是SPEEDTREE www.speedtree.com SPEEDTREE中的内容可以以假乱
        真,而且又得到性能的优化
    @par
        这个类的目的不是实现LOD (远景 近景 网格中三角形数量的优化)当然LOD已经在
        这个引擎中实现了
    @par
        我相信能比speedtree做得更出色,因为即使在三角形空间中是多么的复杂最终仅仅
        只能在我们的显示屏中出现,在非透明,非共面的情况下哪个三角形能看见,哪个看
        不见已经是一个定局
    @par
        这个类还提供一个光特效优化通道,这个并不是doom3 中出现的normalmap 当然 
        normal map 已经在这个引擎中实现了,这个通道能产生在光照时需要的网格模,通
        过这个模可以得到光具体给哪个三角形遮掩了
    @par
        同时这个类也实现了shader 形式的动画更新,我们知道动画更新可以用cpu特效如
        SSE2 3DNOW! 但如果我们使用了GPU数组,而又把这些网格数据从GPU显存中取出再
        用SSE2更新 再把更新后的数据放回GPU显存中,可想而知性能不可能高,而这个类
        实现了协同性,不再把想法放在数组中了,而是在它们渲染出来之前改变全局状态从
        而达到显示出来的最终位置 发生了变化,所以在动画方面要下工夫状态器要保留网
        格当前和动画相应的下一个阶段的变化,同时这个引擎保留了基本实现,毕竟不是所有
        机器都能用上.
    @note
        暂时给这种技术取名为 : 智能网格  技术
    @warrning
        然而我还没有实现它
    */
    class IntelliMesh : public Mesh 
    {
        
    };
}
#endif