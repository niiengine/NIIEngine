
#include "NiiPreProcess.h"
/*
    N_Only(ScriptHelper).add(N_Lang_English, N_Script_Unit_Material, "material");
    N_Only(ScriptHelper).add(N_Lang_English, N_Script_Unit_GpuProgramVP, "vertex_program");
    N_Only(ScriptHelper).add(N_Lang_English, N_Script_Unit_GpuProgramGP,"geometry_program");
    N_Only(ScriptHelper).add(N_Lang_English, N_Script_Unit_GpuProgramFP,"fragment_program");
    N_Only(ScriptHelper).add(N_Lang_English, N_Script_Unit_ParticleSpace, "particle_system");
    N_Only(ScriptHelper).add(N_Lang_English, N_Script_Unit_SpreadParticle, "emitter");
    N_Only(ScriptHelper).add(N_Lang_English, N_Script_Unit_Compositor, "affector");
    N_Only(ScriptHelper).add(N_Lang_English, N_Script_Unit_GpuProgramParam, "shared_params");

    ScriptLangMap * slm = N_new ScriptLangMap(N_Lang_English);
    slm->add(ShaderFusionProperty, "technique");
    slm->add(ShaderChProperty,"pass");
    slm->add(ShaderChTextureUnitProperty,"texture_unit");
    slm->add(VertexProgramProperty,"vertex_program_ref");
    slm->add(GeoProgramProperty,"geometry_program_ref");
    slm->add(FragmentProgramProperty,"fragment_program_ref");
    slm->add(ShadowCastVertexProgramProperty, "shadow_caster_vertex_program_ref");
    slm->add(ShadowCastFragmentProgramProperty, "shadow_caster_fragment_program_ref");
    slm->add(ShadowReceiveVertexProgramProperty,"shadow_receiver_vertex_program_ref");
    slm->add(ShadowReceiveFragmentProgramProperty,"shadow_receiver_fragment_program_ref");

    slm->add(LodSchemeValueProperty, "lod_values");
    slm->add(LodSchemeProperty, "lod_strategy");
    slm->add(LodSchemeCameraProperty, "lod_distances");
    slm->add(ReceiveShadowProperty, "receive_shadows");
    slm->add(AlphaCastShadowProperty, "transparency_casts_shadows");

    slm->add(ShaderFusionSchemeProperty,"scheme");
    slm->add(LodSchemeIndexProperty,"lod_index");
    slm->add(ShadowCastMaterialProperty,"shadow_caster_material");
    slm->add(ShadowReceiveMaterialProperty,"shadow_receiver_material");
    slm->add(GpuVendorProperty, "gpu_vendor_rule");

    slm->add(AmbientColourProperty, "ambient");
    slm->add(DiffuseColourProperty, "diffuse");
    slm->add(SpecularColourProperty, "specular");
    slm->add(EmissiveColourProperty, "emissive");
    slm->add(VertexColourProperty, "vertexcolour");
    slm->add(FrameBlendProperty, "scene_blend");
    slm->add(FrameColourBlendProperty, "colour_blend");
    slm->add(ColourFactorOneProperty, "one");
    slm->add(ColourFactorZeroProperty, "zero");
    slm->add(ColourFactorDestProperty, "dest_colour");
    slm->add(ColourFactorSrcProperty, "src_colour");
    slm->add(ColourFactorOneMinusSrcProperty, "one_minus_src_colour");
    slm->add(ColourFactorOneMinusDestProperty, "one_minus_dest_colour");
    slm->add(ColourFactorDestAlphaProperty, "dest_alpha");
    slm->add(ColourFactorSrcAlphaProperty, "src_alpha");
    slm->add(ColourFactorOneMinusDestAlphaProperty, "one_minus_dest_alpha");
    slm->add(ColourFactorOneMinusSrcAlphaProperty, "one_minus_src_alpha");
    slm->add(FrameBlend2Property, "separate_scene_blend");
    slm->add(FrameBlendOpProperty, "scene_blend_op");
    slm->add(FrameOpRevSubtractProperty, "reverse_subtract");
    slm->add(FrameOpMinProperty, "min");
    slm->add(FrameOpMaxProperty, "max");
    slm->add(FrameBlend2OpProperty, "separate_scene_blend_op");
    slm->add(DepthCheckProperty, "depth_check");
    slm->add(DepthWriteProperty,"depth_write");
    slm->add(DepthFuncProperty,"depth_func");
    slm->add(DepthBiasProperty,"depth_bias");
    slm->add(DepthMultiBiasProperty,"iteration_depth_bias");
    slm->add(CmpModeAlwaysFailProperty, "always_fail");
    slm->add(CmpModeAlwaysPassProperty,"always_pass");
    slm->add(CmpModeLessEqualProperty,"less_equal");
    slm->add(CmpModeLessProperty,"less");
    slm->add(CmpModeEqualProperty,"equal");
    slm->add(CmpModeNotEqualProperty,"not_equal");
    slm->add(CmpModeGreaterEqualProperty,"greater_equal");
    slm->add(CmpModeGreaterProperty, "greater");
    slm->add(AlphaRejectProperty, "alpha_rejection");
    slm->add(AlphaCoverageProperty, "alpha_to_coverage");
    slm->add(LightClipProperty, "light_scissor");
    slm->add(LightClipPlaneProperty, "light_clip_planes");
    slm->add(ForceDepthSortProperty, "transparent_sorting");
    slm->add(ShaderStepProperty,"illumination_stage");
    slm->add(ShaderStepDecalProperty,"decal");
    slm->add(CullingModeProperty,"cull_hardware");
    slm->add(CullingModeClockwiseProperty,"clockwise");
    slm->add(CullingModeAntClockwiseProperty,"anticlockwise");
    slm->add(SysCullingModeProperty,"cull_software");
    slm->add(SysCullingBackProperty,"back");
    slm->add(SysCullingFrontProperty,"front");
    slm->add(UnitNormalsProperty,"normalise_normals");
    slm->add(LightingProperty,"lighting");
    slm->add(ShadeModeProperty,"shading");
    slm->add(ShadeModeFlatProperty,"flat");
    slm->add(ShadeModeGouraudProperty,"gouraud");
    slm->add(ShadeModePhongProperty,"phong");
    slm->add(PolygonModeProperty,"polygon_mode");
    slm->add(PolygonModeSolidProperty,"solid");
    slm->add(PolygonModeWireFrameProperty,"wireframe");
    slm->add(PolygonModePointsProperty,"points");
    slm->add(AutoReduceProperty, "polygon_mode_overrideable");
    slm->add(FogProperty,"fog_override");
    slm->add(NoneProperty,"none");
    slm->add(LinearMathProperty,"linear");
    slm->add(FogExpProperty,"exp");
    slm->add(FogExp2Property,"exp2");
    slm->add(ColourWriteProperty,"colour_write");
    slm->add(MaxLightsProperty,"max_lights");
    slm->add(StartLightProperty,"start_light");
    slm->add(MultiChProperty,"iteration");
    slm->add(NoEachLightProperty,"once");
    slm->add(EachLightProperty,"once_per_light");
    slm->add(EachLightLimitCountProperty,"per_n_lights");
    slm->add(ShaderStepGlobalProperty,"ambient");
    slm->add(ShaderStepDetailLightProperty,"per_light");
    slm->add(PointMathProperty,"point");
    slm->add(PointLightProperty,"point");
    slm->add(SpotLightProperty,"spot");
    slm->add(DirLightProperty,"directional");
    slm->add(LightMaskProperty, "light_mask");
    slm->add(PointSizeProperty, "point_size");
    slm->add(PointSpritesProperty, "point_sprites");
    slm->add(PointSizeMinProperty, "point_size_min");
    slm->add(PointSizeMaxProperty, "point_size_max");
    slm->add(PointSizeAttenuationProperty, "point_size_attenuation");

    slm->add(TextureProperty, "texture");
    slm->add(Texture1DProperty, "1d");
    slm->add(Texture2DProperty, "2d");
    slm->add(Texture3DProperty, "3d");
    slm->add(TextureCubicProperty, "cubic");
    slm->add(TextureAutoMipMapProperty, "unlimited");
    slm->add(TextureAlphaProperty, "alpha");
    slm->add(TextureGammaProperty, "gamma");
    slm->add(TextureAnimProperty,"anim_texture");
    slm->add(TextureCubic6Property,"cubic_texture");
    slm->add(TextureUVWProperty,"combinedUVW");
    slm->add(TextureCoordSetProperty,"tex_coord_set");
    slm->add(TextureAddressModeProperty,"tex_address_mode");
    slm->add(TextureAddressWrapProperty,"wrap");
    slm->add(TextureAddressClampProperty,"clamp");
    slm->add(TextureAddressMirrorProperty,"mirror");
    slm->add(TextureAddressBorderProperty,"border");
    slm->add(TextureBorderColourProperty,"tex_border_colour");
    slm->add(TextureFilteringProperty,"filtering");
    slm->add(TextureBilinearProperty,"bilinear");
    slm->add(TextureTrilinearProperty,"trilinear");
    slm->add(AnisoMathProperty,"anisotropic");
    slm->add(TextureAnisotropyProperty,"max_anisotropy");
    slm->add(TextureMipmapBiasProperty,"mipmap_bias");
    slm->add(TextureColourBlendProperty,"colour_op");
    slm->add(ReplaceMathProperty,"replace");
    slm->add(AddMathProperty,"add");
    slm->add(AlphaMathProperty,"alpha_blend");
    slm->add(TextureColourBlend2Property,"colour_op_ex");
    slm->add(TextureBlendSource1Property,"source1");
    slm->add(TextureBlendSource2Property,"source2");
    slm->add(ModulateMathProperty,"modulate");
    slm->add(TextureBlendModulateX2Property,"modulate_x2");
    slm->add(TextureBlendModulateX4Property,"modulate_x4");
    slm->add(TextureBlendSignedProperty,"add_signed");
    slm->add(TextureBlendSmoothProperty,"add_smooth");
    slm->add(SubtractMathProperty,"subtract");
    slm->add(TextureDiffuseBlendProperty,"blend_diffuse_alpha");
    slm->add(TextureCurrentTextureBlendProperty,"blend_texture_alpha");
    slm->add(TexturePreTextureBlendProperty,"blend_current_alpha");
    slm->add(TextureBlendConstantFactorProperty,"blend_manual");
    slm->add(TextureBlendDotProductProperty,"dotproduct");
    slm->add(TextureSpecularBlendProperty,"blend_diffuse_colour");
    slm->add(TextureBlendPreTextureProperty,"src_current");
    slm->add(TextureBlendCurrentTextureProperty,"src_texture");
    slm->add(TextureBlendCurrentDiffuseProperty,"src_diffuse");
    slm->add(TextureBlendCurrentSpecularProperty,"src_specular");
    slm->add(TextureBlendConstantProperty,"src_manual");
    slm->add(TextureAlphaBlendProperty,"alpha_op_ex");
    slm->add(TextureEnvMapProperty,"env_map");
    slm->add(TextureSphericalProperty,"spherical");
    slm->add(TexturePlanarProperty,"planar");
    slm->add(TextureReflectionProperty,"cubic_reflection");
    slm->add(TextureNormalMapProperty,"cubic_normal");
    slm->add(TextureScrollProperty,"scroll");
    slm->add(TextureScrollAnimProperty,"scroll_anim");
    slm->add(TextureRotateProperty,"rotate");
    slm->add(TextureRotateAnimProperty,"rotate_anim");
    slm->add(TextureScaleProperty,"scale");
    slm->add(TextureWaveXFormProperty,"wave_xform");
    slm->add(TextureScrollXProperty,"scroll_x");
    slm->add(TextureScrollYProperty,"scroll_y");
    slm->add(TextureScaleXProperty,"scale_x");
    slm->add(TextureScaleYProperty,"scale_y");
    slm->add(TextureWaveSineProperty,"sine");
    slm->add(TextureWaveTriangleProperty,"triangle");
    slm->add(TextureWaveSawtoothProperty,"sawtooth");
    slm->add(TextureWaveSquareProperty,"square");
    slm->add(TextureWaveInvSawtoothProperty,"inverse_sawtooth");
    slm->add(TextureMatrixProperty,"transform");
    slm->add(TextureFetchTypeProperty,"binding_type");
    slm->add(TextureFetchVertexProperty,"vertex");
    slm->add(TextureFetchFragmentProperty,"fragment");
    slm->add(TextureContentTypeProperty,"content_type");
    slm->add(TextureNormalContentTypeProperty,"named");
    slm->add(TextureShadowContentTypeProperty,"shadow");
    slm->add(ShaderChTextureSrcProperty,"texture_source");

    slm = N_new ScriptLangMap(N_Lang_English);
    slm->add(N_PropertyGpuProgram_Src, "source");
    slm->add(N_PropertyGpuProgram_Syntax, "syntax");
    slm->add(N_PropertyGpuProgram_Param, "default_params");
    slm->add(N_PropertyGpuProgram_ParamIndex, "param_indexed");
    slm->add(N_PropertyGpuProgram_ParamName, "param_named");
    slm->add(N_PropertyGpuProgram_SParamIndex, "param_indexed_auto");
    slm->add(N_PropertyGpuProgram_SParamName, "param_named_auto");
    slm->add(N_PropertyGpuProgram_ParamValue, "shared_params_ref");

    mIds["shared_param_named"] add(N_PropertyGpuProgramParam_ParamName, );

        // Fusion
        mIds["compositor"] add(TextureFusionContentTypeProperty,);
        mIds["target"] = ID_TARGET,);
        mIds["target_output"] = ID_TARGET_OUTPUT,);

        mIds["input"] = ID_INPUT,);
            mIds["none"] = NoneProperty,);
            mIds["previous"] = ID_PREVIOUS,);
            mIds["target_width"] = ID_TARGET_WIDTH,);
            mIds["target_height"] = ID_TARGET_HEIGHT,);
            mIds["target_width_scaled"] = ID_TARGET_WIDTH_SCALED,);
            mIds["target_height_scaled"] = ID_TARGET_HEIGHT_SCALED,);
            mIds["pooled"] = ID_POOLED,);
            mIds["gamma"] = ID_GAMMA,);
            mIds["no_fsaa"] = ID_NO_FSAA,);
            mIds["depth_pool"] = ID_DEPTH_POOL,);

        mIds["texture_ref"] = ID_TEXTURE_REF,);
        mIds["local_scope"] = ID_SCOPE_LOCAL,);
        mIds["chain_scope"] = ID_SCOPE_CHAIN,);
        mIds["global_scope"] = ID_SCOPE_GLOBAL,);
        mIds["compositor_logic"] = ID_COMPOSITOR_LOGIC,);

        mIds["only_initial"] = ID_ONLY_INITIAL,);
        mIds["visibility_mask"] = ID_VISIBILITY_MASK,);
        mIds["lod_bias"] = ID_LOD_BIAS,);
        mIds["material_scheme"] = ID_MATERIAL_SCHEME,);
        mIds["shadows"] = ID_SHADOWS_ENABLED,);

        mIds["clear"] = ID_CLEAR,);
        mIds["stencil"] = ID_STENCIL,);
        mIds["render_scene"] = ID_RENDER_SCENE,);
        mIds["render_quad"] = ID_RENDER_QUAD,);
        mIds["identifier"] = ID_IDENTIFIER,);
        mIds["first_render_queue"] = ID_FIRST_RENDER_QUEUE,);
        mIds["last_render_queue"] = ID_LAST_RENDER_QUEUE,);
        mIds["quad_normals"] = ID_QUAD_NORMALS,);
            mIds["camera_far_corners_view_space"] = ID_CAMERA_FAR_CORNERS_VIEW_SPACE,);
            mIds["camera_far_corners_world_space"] = ID_CAMERA_FAR_CORNERS_WORLD_SPACE,);

        mIds["buffers"] = ID_BUFFERS,);
            mIds["colour"] = ID_COLOUR,);
            mIds["depth"] = ID_DEPTH,);
        mIds["colour_value"] = ID_COLOUR_VALUE,);
        mIds["depth_value"] = ID_DEPTH_VALUE,);
        mIds["stencil_value"] = ID_STENCIL_VALUE,);

        mIds["check"] = ID_CHECK,);
        mIds["comp_func"] = ID_COMP_FUNC,);
        mIds["ref_value"] = ID_REF_VALUE,);
        mIds["mask"] = ID_MASK,);
        mIds["fail_op"] = ID_FAIL_OP,);
            mIds["keep"] = ID_KEEP,);
            mIds["increment"] = ID_INCREMENT,);
            mIds["decrement"] = ID_DECREMENT,);
            mIds["increment_wrap"] = ID_INCREMENT_WRAP,);
            mIds["decrement_wrap"] = ID_DECREMENT_WRAP,);
            mIds["invert"] = ID_INVERT,);
        mIds["depth_fail_op"] = ID_DEPTH_FAIL_OP,);
        mIds["pass_op"] = ID_PASS_OP,);
        mIds["two_sided"] = ID_TWO_SIDED,);

        */