/*
-----------------------------------------------------------------------------
A
     __      _   _   _   ______
    |   \   | | | | | | |  ____)                    _
    | |\ \  | | | | | | | |         ___      ___   (_)   ___
    | | \ \ | | | | | | | |____    / _ \   / ___ \  _   / _ \   ___
    | |  \ \| | | | | | |  ____)  | / \ | | |  | | | | | / \ | / _ )
    | |   \ | | | | | | | |_____  | | | | | |__| | | | | | | | | __/
    |_|    \ _| |_| |_| |_______) |_| |_|  \___| | |_| |_| |_| |___|
                                             __/ |                 
                                            \___/   
                                                
                                                
                                                                 F i l e


Copyright: NIIEngine Team Group

Home page: www.niiengine.com 

Email: niiengine@gmail.com OR niiengine@163.com

Licence: commerce(www.niiengine.com/license)(Three kinds)
------------------------------------------------------------------------------
*/
 
//// controller

#ifndef _CommonConntroller_H_
#define _CommonConntroller_H_

#include "gsgsPreInclude.h"
#include "CommonView.h"
#include "gsgsCommon.h"
#include "gsgsToolsetManager.h"
#include "gsgsOptionsConfig.h"
#include "gsgsShellCmd.h"
#include "gsgsTag.h"
#include "wxcrafter.h"
#include "gsgsListCtrlAdvance.h"
#include "gsgsImageManager.h"
#include "context_cpp.h"
#include "debugger.h"
#include <wx/clntdata.h>

namespace gsgs
{
    class Editor;
}

class OptionAddDlg : public OptionAddView
{
public:
    OptionAddDlg();

    void SetValue(const wxString & value);
    wxString GetValue() const;
};

class AddOptionCheckDlg : public OptionCommandAddView
{
public:
    AddOptionCheckDlg(wxWindow* parent, const wxString& title, const Compiler::CmpCmdLineOptions& cmpOptions, const wxString& value = wxEmptyString);
    ~AddOptionCheckDlg();

    wxString GetValue() const;
    void SetValue(const wxString& value);
protected:
    void UpdateOptions();
    void UpdateCmdLine();

    // Event generated by wxFormBuilder
    virtual void OnOptionToggled(wxCommandEvent& event);
    virtual void OnOptionsText(wxCommandEvent& event);
protected:
    Compiler::CmpCmdLineOptions m_cmpOptions;
};

class ProjectBuildDlg : public ProjectBuildView
{
public:
    ProjectBuildDlg(wxWindow* parent);
    void GetBuildInfoList(std::list<QueueCommand> &buildInfoList);

protected:
    // Handlers for BatchBuildBaseDlg events.
    void OnItemSelected(wxCommandEvent& event);
    void OnItemToggled(wxCommandEvent& event);
    void OnBuild(wxCommandEvent& event);
    void OnBuildUI(wxUpdateUIEvent& event);
    void OnClean(wxCommandEvent& event);
    void OnCleanUI(wxUpdateUIEvent& event);
    void OnCheckAll(wxCommandEvent& event);
    void OnUnCheckAll(wxCommandEvent& event);
    void OnMoveUp(wxCommandEvent& event);
    void OnMoveUpUI(wxUpdateUIEvent& event);
    void OnMoveDown(wxCommandEvent& event);
    void OnMoveDownUI(wxUpdateUIEvent& event);
    void OnClose(wxCommandEvent& event);
    
    void DoInitialize();
    void DoSaveBatchBuildOrder();
public:
    int m_cmd;
};

class DbgCommandDlg : public DebugCommandView
{
public:
    DbgCommandDlg(wxWindow* parent);
    virtual ~DbgCommandDlg();

    wxString GetExpression() { return m_textCtrlCommand->GetValue(); }
    wxString GetName() { return m_textCtrlName->GetValue(); }
    wxString GetDbgCommand() { return m_textCtrtDebuggerCommand->GetValue(); }

    void SetDbgCommand(const wxString &dbgCmd) { m_textCtrtDebuggerCommand->SetValue(dbgCmd); }
    void SetName(const wxString &name) { m_textCtrlName->SetValue(name); }
    void SetExpression(const wxString &cmd) { m_textCtrlCommand->SetValue(cmd); }
};


class DependenciesDlg : public ProjectDependView
{
public:
    DependenciesDlg(wxWindow* parent, const wxString& prjname,
        int id = wxID_ANY,
        wxString title = _("Build Order"),
        wxPoint pos = wxDefaultPosition,
        wxSize size = wxSize(700, 450),
        int style = wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER);

    void setProjectName(const wxString & name);

    const wxString & getProjectName() const;
protected:
    void Init();
    void DoSelectProject();

    virtual void OnButtonOK(wxCommandEvent& event);
    virtual void OnButtonCancel(wxCommandEvent& event);
private:
    wxString m_projectName;
};

class DebugCoreDumpDlg : public DebugCoreDumpView {

public:
    DebugCoreDumpDlg(wxWindow* parent);
    virtual ~DebugCoreDumpDlg() {}

    wxString GetCore() { return m_Core->GetValue(); }
    wxString GetExe() { return m_ExeFilepath->GetValue(); }
    wxString GetWorkingDirectory() { return m_WD->GetValue(); }
    wxString GetDebuggerName() { return m_choiceDebuggers->GetStringSelection(); }

protected:
    virtual void OnButtonBrowseCore(wxCommandEvent& event);
    virtual void OnButtonBrowseExe(wxCommandEvent& event);
    virtual void OnButtonBrowseWD(wxCommandEvent& event);
    virtual void OnButtonCancel(wxCommandEvent& event);
    virtual void OnButtonDebug(wxCommandEvent& event);
    virtual void OnDebugBtnUpdateUI(wxUpdateUIEvent& event);

    void Initialize();
};

class EditCmpFileInfo : public wxDialog
{
public:
    EditCmpFileInfo(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& title = _("Settings"),
        const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(800, 150), long style = gsgsDlgStyle);
    virtual ~EditCmpFileInfo();

    wxString GetCompilationLine() {
        return m_textCtrl2->GetValue();
    }
    wxString GetKind() {
        return m_choiceFileTypeIs->GetStringSelection();
    }
    wxString GetExtension() {
        return m_textCtrlFileType->GetValue();
    }

    void SetCompilationLine(const wxString &s);

    void SetExtension(const wxString &s);

    void SetKind(const wxString &s);
protected:
    // Handlers for EditCmpFileInfoBase events.
    void OnFileTypeText(wxCommandEvent& event);
    void OnCompilationLine(wxCommandEvent& event);
    void OnButtonOk(wxCommandEvent& event);
    void OnButtonOkUI(wxUpdateUIEvent& event);
    void OnButtonCancel(wxCommandEvent& event);
    void OnButtonHelp(wxCommandEvent& event);
private:
    wxStaticText* m_staticText3;
    wxTextCtrl* m_textCtrlFileType;
    wxStaticText* m_staticText2;
    wxChoice* m_choiceFileTypeIs;
    wxStaticText* m_staticText4;
    wxTextCtrl* m_textCtrl2;
    gsgs::Button* m_buttonHelp;
    gsgs::Button* m_buttonOk;
    gsgs::Button* m_buttonCancel;
};

class SymbolsDialog : public SymbolsView
{
public:
    SymbolsDialog(wxWindow* parent);
    virtual ~SymbolsDialog();

    void AddSymbol(const TagEntryPtr& tag, bool sel);

    void AddSymbols(const std::vector<TagEntryPtr>& tags, size_t sel);

    const wxString& GetFile() const { return m_file; }
    long GetLine() const { return m_line; }
    const wxString& GetPattern() const { return m_pattern; }
    TagEntryPtr GetTag() { return m_tag; }
private:
    void UpdateFileAndLine(wxListEvent& event);

    void OnItemSelected(wxListEvent& event);
    void OnItemActivated(wxListEvent& event);
    void OnButtonCancel(wxCommandEvent& event);
    void OnButtonOK(wxCommandEvent& event);
    void OnCharHook(wxKeyEvent& event);
    void OnItemDeselected(wxListEvent& event);

    DECLARE_EVENT_TABLE()
private:
    std::vector<TagEntryPtr> m_tags;
    TagEntryPtr m_tag;
    wxString m_file;
    wxString m_pattern;
    long m_selectedItem;
    long m_line;
};

class NewItemDlg : public NewItemView
{
public:
    NewItemDlg(wxWindow* parent, const wxString & cwd);
    virtual ~NewItemDlg();

    const wxFileName & GetFileName() const { return m_newFileName; }
protected:
    DECLARE_EVENT_TABLE();
    virtual void OnClick(wxCommandEvent &event);
    virtual void OnListItemSelected(wxListEvent &event);
    virtual void OnCharHook(wxKeyEvent &event);
private:
    void ConnectEvents();
    bool Validate(wxString &errMsg);
    void DoCreateFile();
private:
    wxString m_fileTypeValue;
    wxFileName m_newFileName;
    wxString m_cwd;
};

class EditConfigurationDialog : public EditConfigurationView
{
public:
    EditConfigurationDialog(wxWindow * parent, const wxString & projectName, int id = wxID_ANY,
        wxString title = _("Edit Configurations"), wxPoint pos = wxDefaultPosition,
        wxSize size = wxSize(338, 199), int style = wxDEFAULT_DIALOG_STYLE);

    void SetProjectName(const wxString & pname){ m_projectName = pname; }
    const wxString & GetProjectName() const{return m_projectName;}
protected:
    void OnItemDclick(wxCommandEvent& event);
    void OnButtonClose(wxCommandEvent& event);
    void OnButtonRename(wxCommandEvent& event);
    void OnButtonDelete(wxCommandEvent& event);

    void RenameConfiguration(const wxString & oldName, const wxString & newName);
protected:
    wxString m_projectName;
};

class FreeTextDialog : public FreeTextView
{
public:
    FreeTextDialog(wxWindow* parent, wxString value = wxEmptyString);
    wxString GetValue() const { return m_text->GetValue(); }
};

class NewConfigurationDlg : public NewConfigurationView
{
public:
    NewConfigurationDlg(wxWindow* parent, const wxString& projName);
protected:
    void OnButtonOK(wxCommandEvent& event);
private:
    wxString m_projectName;
};

/** Implementing RenameFileBaseDlg */
class RenameFileDlg : public RenameFileView
{
public:
    RenameFileDlg(wxWindow * parent, const wxString & replaceWith, IStatementList & matches);
    virtual ~RenameFileDlg();

    IStatementList GetMatches() const;
    wxString GetReplaceWith() const;
protected:
    void OnFileSelected(wxCommandEvent & event);
    void DoSelectItem(int idx);
private:
    std::map<int, IncludeStatement> m_entries;
};

class DebuggerBtImgList : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    DebuggerBtImgList();
    const wxBitmap& Bitmap(const wxString& name) const
    {
        if(!m_bitmaps.count(name + m_resolution)) return wxNullBitmap;
        return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString) { m_resolution = res; }

    virtual ~DebuggerBtImgList();
};

/** Implementing ListCtrlPanelBase */
class DebuggerCallstackView : public wxPanel
{
public:
    DebuggerCallstackView(wxWindow* parent, wxWindowID id = wxID_ANY, const wxPoint& pos = wxDefaultPosition,
                      const wxSize& size = wxSize(500, 300), long style = wxTAB_TRAVERSAL);
    virtual ~DebuggerCallstackView();
    void Update(const StackEntryArray& stackArr);
    void SetCurrentLevel(const int level);
    void Clear();

    virtual void OnMenu(wxDataViewEvent& event);

    virtual void OnItemActivated(wxDataViewEvent& event);
    
        gsgs::ThemedListCtrl* GetDvListCtrl() { return m_dvListCtrl; }
protected:
    // Handlers for ListCtrlPanelBase events.
    void OnCopyBacktrace(wxCommandEvent& event);
    void OnUpdateBacktrace(gsgs::Event& e);
    void OnFrameSelected(gsgs::Event& e);
    void EnsureRowVisible(int row);
private:
    int m_currLevel;
    StackEntryArray m_stack;
    DebuggerBtImgList m_images;
    gsgs::ThemedListCtrl* m_dvListCtrl;
    gsgs::BitmapList m_bitmaps;
};

wxDECLARE_EVENT(wxEVT_DETACHED_EDITOR_CLOSED, gsgs::Event);

class EditorFrame : public EditorFrameBase
{
protected:
    gsgs::QuickFindBar* m_findBar;
    gsgs::EditorScrolledPanel * m_editor = nullptr;

protected:
    virtual void OnCloseWindow(wxCloseEvent& event);
    virtual void OnFindUI(wxUpdateUIEvent& event);
    virtual void OnFind(wxCommandEvent& event);
    virtual void OnClose(wxCommandEvent& event);
    virtual void OnCloseUI(wxUpdateUIEvent& event);
    void OnSave(wxCommandEvent& event);
    void OnSaveUI(wxUpdateUIEvent& event);
    void OnUndoUI(wxUpdateUIEvent& event);
    void OnRedoUI(wxUpdateUIEvent& event);
    void OnEdit(wxCommandEvent& event);
    void DoCloseEditor(gsgs::EditorScrolledPanel * editor);
    void OnUndo(wxCommandEvent& event);
    void OnRedo(wxCommandEvent& event);
    void OnReload(wxCommandEvent& event);

public:
    EditorFrame(wxWindow* parent, gsgs::EditorScrolledPanel * editor, size_t notebookStyle);
    virtual ~EditorFrame();
    gsgs::EditorScrolledPanel * GetEditor() const { return m_editor; }
};
typedef std::list<EditorFrame*> EditorFrameList_t;

class ImplementParentVirtualFunctionsDialog;

class FunctionImplDetails : public wxClientData
{
    friend class ImplementParentVirtualFunctionsDialog;

protected:
    FunctionImplDetails() {}
    virtual ~FunctionImplDetails() {}

public:
    void SetVisibility(const wxString& visibility) { this->m_visibility = visibility; }
    const wxString& GetVisibility() const { return m_visibility; }
    void SetPrependVirtualKeyword(bool prependVirtualKeyword) { this->m_prependVirtualKeyword = prependVirtualKeyword; }
    bool IsPrependVirtualKeyword() const { return m_prependVirtualKeyword; }
    void SetSelected(bool selected) { this->m_selected = selected; }
    bool IsSelected() const { return m_selected; }
    void SetDoxygen(bool doxygen) { this->m_doxygen = doxygen; }
    bool IsDoxygen() const { return m_doxygen; }

    void SetTagIndex(int tagIndex) { this->m_tagIndex = tagIndex; }
    wxString GetImpl(ImplementParentVirtualFunctionsDialog* dlg) const;
    wxString GetDecl(ImplementParentVirtualFunctionsDialog* dlg) const;
protected:
    wxString m_visibility = "public";
    bool m_prependVirtualKeyword = true;
    int m_tagIndex = wxNOT_FOUND;
    bool m_selected = true;
    bool m_doxygen = true;
};

class ImplementParentVirtualFunctionsDialog : public wxDialog
{
    friend class FunctionImplDetails;
public:
    /** Constructor */
    ImplementParentVirtualFunctionsDialog(wxWindow* parent, const wxString& scopeName,
                                          const std::vector<TagEntryPtr>& tags, wxChar doxyPrefix /* @ or \\ */,
                                          gsgs::ContextCpp* contextCpp, wxWindowID id = wxID_ANY,
                                        const wxString& title = _("Implement Parent Virtual Functions"),
                                        const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(-1, -1),
                                        long style = wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER);
    virtual ~ImplementParentVirtualFunctionsDialog();

    wxString GetDecl(const wxString& visibility);
    wxString GetImpl();

    void SetTargetFile(const wxString& file);
    wxString GetTargetFile() const { return m_textCtrlImplFile->GetValue(); }

    bool IsFormatAfterInsert() const { return m_checkBoxFormat->IsChecked(); }
    TagEntryPtr GetTag(size_t index) const;
    
    wxBannerWindow* GetBanner4() { return m_banner4; }
    wxStaticText* GetStaticText2() { return m_staticText2; }
    wxTextCtrl* GetTextCtrlImplFile() { return m_textCtrlImplFile; }
    gsgs::ThemedListCtrl* GetDvListCtrl() { return m_dvListCtrl; }
    gsgs::Button* GetButton10() { return m_button10; }
    gsgs::Button* GetButton12() { return m_button12; }
    wxCheckBox* GetCheckBoxFormat() { return m_checkBoxFormat; }
    gsgs::Button* GetButtonOk() { return m_buttonOk; }
    gsgs::Button* GetButtonCancel() { return m_buttonCancel; }
protected:
    void OnCheckAll(wxCommandEvent& event);
    void OnUnCheckAll(wxCommandEvent& event);
    void DoCheckAll(bool check);
    void UpdateDetailsForRow(FunctionImplDetails& details, size_t row);
    void DoInitialize(bool updateDoxyOnly);
    void Clear();

    TagEntryPtr GetAssociatedTag(const wxDataViewItem& item) const;
    TagEntryPtr GetAssociatedTag(size_t row) const;

    wxString DoMakeCommentForTag(TagEntryPtr tag) const;
protected:
    std::vector<TagEntryPtr> m_tags;
    wxChar m_doxyPrefix;
    gsgs::ContextCpp* m_contextCpp;
    wxString m_scope;
    wxBannerWindow* m_banner4;
    wxStaticText* m_staticText2;
    wxTextCtrl* m_textCtrlImplFile;
    gsgs::ThemedListCtrl* m_dvListCtrl;
    gsgs::Button* m_button10;
    gsgs::Button* m_button12;
    wxCheckBox* m_checkBoxFormat;
    gsgs::Button* m_buttonOk;
    gsgs::Button* m_buttonCancel;
};

/** Implementing TagsParserSearchPathsBaseDlg */
class TagsParserSearchPathsDlg : public wxDialog
{
public:
	/** Constructor */
	TagsParserSearchPathsDlg( wxWindow* parent, const wxArrayString &paths, const wxArrayString &excludePaths , wxWindowID id = wxID_ANY, 
        const wxString& title = _("Add Search Paths to Code Completion Parser"), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,
            long style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER );
	virtual ~TagsParserSearchPathsDlg();

	wxArrayString GetSearchPaths() const;
	wxArrayString GetExcludePath() const;
protected:
    wxStaticText* m_staticText2;
    wxCheckListBox* m_checkListPaths;
    wxCheckListBox* m_checkListExcludePaths;
    wxStaticLine* m_staticline1;
    gsgs::Button* m_buttonOk;
    gsgs::Button* m_buttonCancel;
	
};

/** Implementing TasksFindWhatDlgBase */
class TasksFindWhatDlg : public wxDialog
{
public:
	/** Constructor */
	TasksFindWhatDlg( wxWindow* parent , wxWindowID id = wxID_ANY, const wxString& title = _("Find What..."), 
        const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER );
	virtual ~TasksFindWhatDlg();
protected:
	// Handlers for TasksFindWhatDlgBase events.
	void OnNewTask( wxCommandEvent& event );
	void OnDeleteTask( wxCommandEvent& event );
	void OnDeleteTaskUI( wxUpdateUIEvent& event );
	void OnEditTask( wxCommandEvent& event );
	void OnEditTaskUI( wxUpdateUIEvent& event );
	void OnButtonOk( wxCommandEvent& event );

private:
	void DoAddLine(const wxString &name, const wxString &regex, bool enabled);
	void DoSaveList();
private:
    gsgs::ListCtrlAdvance *m_list;
    gsgs::Button* m_buttonNew;
    gsgs::Button* m_buttonEdit;
    gsgs::Button* m_buttonDelete;
    wxStaticLine* m_staticline1;
    gsgs::Button* m_buttonOk;
    gsgs::Button* m_buttonCancel;
};
#define wxID_RENAME 1000

/** Implementing ManagePerspectivesBaseDlg */
class ManagePerspectivesDlg : public wxDialog
{
public:
	/** Constructor */
	ManagePerspectivesDlg( wxWindow* parent , wxWindowID id = wxID_ANY, const wxString& title = _("Perspectives..."), 
        const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER );
	virtual ~ManagePerspectivesDlg();
protected:
	// Handlers for ManagePerspectivesBaseDlg events.
	void OnDeletePerspective( wxCommandEvent& event );
	void OnDeletePerspectiveUI( wxUpdateUIEvent& event );
	void OnRenamePerspective( wxCommandEvent& event );
	void OnRenamePerspectiveUI( wxUpdateUIEvent& event );

	void DoPopulateList();
protected:
    wxListBox* m_listBox;
    gsgs::Button* m_button3;
    gsgs::Button* m_button4;
    wxStaticLine* m_staticline1;
    gsgs::Button* m_buttonOk;
    gsgs::Button* m_buttonCancel;
};

/** Implementing NewVersionBaseDlg */
class NewVersionDlg : public wxDialog
{
public:
	/** Constructor */
	NewVersionDlg( wxWindow* parent , wxWindowID id = wxID_ANY, const wxString& title = _("A New version is available!"), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_DIALOG_STYLE);
    ~NewVersionDlg();
    void SetMessage(const wxString &message);
	void SetReleaseNotesURL(const wxString &url);
protected:
	void OnOk( wxCommandEvent& event );
	void OnCancel( wxCommandEvent& event );
protected:
    wxStaticText* m_staticText;
    wxHyperlinkCtrl* m_hyperlink1;
    wxStaticLine* m_staticline1;
    gsgs::Button* m_buttonOk;
    gsgs::Button* m_buttonCancel;
};

/** Implementing SavePerspectiveDlgBase */
class SavePerspectiveDlg : public wxDialog
{
public:
	/** Constructor */
	SavePerspectiveDlg( wxWindow* parent , wxWindowID id = wxID_ANY, const wxString& title = _("Save Perspective As..."), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_DIALOG_STYLE );
	//~SavePerspectiveDlg();
    
    //// end generated class members
	
	wxString GetPerspectiveName() const;
protected:
    wxStaticText* m_staticText1;
    wxComboBox* m_comboBox;
    wxStaticLine* m_staticline2;
    gsgs::Button* m_button5;
    gsgs::Button* m_button6;
};

#endif